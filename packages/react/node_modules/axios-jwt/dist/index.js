"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var jwt = __importStar(require("jsonwebtoken"));
// a little time before expiration to try refresh (seconds)
var EXPIRE_FUDGE = 10;
// EXPORTS
exports.isLoggedIn = function () {
    var token = exports.getRefreshToken();
    return !!token;
};
exports.setAuthTokens = function (tokens) { return localStorage.setItem(getTokenStorageKey(), JSON.stringify(tokens)); };
exports.setAccessToken = function (token) {
    var tokens = getAuthTokens();
    if (!tokens) {
        console.warn('Trying to set new access token but no auth tokens found in storage. This should not happen.');
        return;
    }
    tokens.accessToken = token;
    exports.setAuthTokens(tokens);
};
exports.clearAuthTokens = function () { return localStorage.removeItem(getTokenStorageKey()); };
// PRIVATE
var getTokenStorageKey = function () { return "auth-tokens-" + process.env.NODE_ENV; };
var getAuthTokens = function () {
    var tokensRaw = localStorage.getItem(getTokenStorageKey());
    if (!tokensRaw)
        return;
    try {
        // parse stored tokens JSON
        return JSON.parse(tokensRaw);
    }
    catch (err) {
        console.error('Failed to parse auth tokens: ', tokensRaw, err);
    }
    return;
};
exports.getRefreshToken = function () {
    var tokens = getAuthTokens();
    return tokens ? tokens.refreshToken : undefined;
};
exports.getAccessToken = function () {
    var tokens = getAuthTokens();
    return tokens ? tokens.accessToken : undefined;
};
var isTokenExpired = function (token) {
    if (!token)
        return true;
    var expin = getExpiresInFromJWT(token) - EXPIRE_FUDGE;
    return !expin || expin < 0;
};
// gets unix TS
var getTokenExpiresTimeStamp = function (token) {
    var decoded = jwt.decode(token);
    if (!decoded)
        return;
    return decoded.exp;
};
var getExpiresInFromJWT = function (token) {
    var exp = getTokenExpiresTimeStamp(token);
    if (exp)
        return exp - Date.now() / 1000;
    return -1;
};
var refreshToken = function (requestRefresh) { return __awaiter(_this, void 0, void 0, function () {
    var refreshToken, res, err_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                refreshToken = exports.getRefreshToken();
                if (!refreshToken)
                    return [2 /*return*/, Promise.reject('No refresh token available')];
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4 /*yield*/, requestRefresh(refreshToken)
                    // save tokens
                ];
            case 2:
                res = _a.sent();
                // save tokens
                exports.setAccessToken(res);
                return [2 /*return*/, res];
            case 3:
                err_1 = _a.sent();
                // failed to refresh... check error type
                if (err_1 && err_1.response && (err_1.response.status === 401 || err_1.response.status === 422)) {
                    // got invalid token response for sure, remove saved tokens because they're invalid
                    localStorage.removeItem(getTokenStorageKey());
                    return [2 /*return*/, Promise.reject("Got 401 on token refresh; Resetting auth token: " + err_1)];
                }
                else {
                    // some other error, probably network error
                    return [2 /*return*/, Promise.reject("Failed to refresh auth token: " + err_1)];
                }
                return [3 /*break*/, 4];
            case 4: return [2 /*return*/];
        }
    });
}); };
var authTokenInterceptor = function (_a) {
    var _b = _a.header, header = _b === void 0 ? 'Authorization' : _b, _c = _a.headerPrefix, headerPrefix = _c === void 0 ? 'Bearer ' : _c, requestRefresh = _a.requestRefresh;
    return function (requestConfig) { return __awaiter(_this, void 0, void 0, function () {
        var accessToken, err_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    // we need refresh token to do any authenticated requests
                    if (!exports.getRefreshToken())
                        return [2 /*return*/, requestConfig
                            // do refresh if needed
                        ];
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, exports.refreshTokenIfNeeded(requestRefresh)];
                case 2:
                    accessToken = _a.sent();
                    return [3 /*break*/, 4];
                case 3:
                    err_2 = _a.sent();
                    console.warn(err_2);
                    return [2 /*return*/, Promise.reject("Unable to refresh access token for request: " + requestConfig + " due to token refresh error: " + err_2)];
                case 4:
                    // add token to headers
                    if (accessToken)
                        requestConfig.headers[header] = "" + headerPrefix + accessToken;
                    return [2 /*return*/, requestConfig];
            }
        });
    }); };
};
exports.refreshTokenIfNeeded = function (requestRefresh) { return __awaiter(_this, void 0, void 0, function () {
    var accessToken;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                accessToken = exports.getAccessToken();
                if (!(!accessToken || isTokenExpired(accessToken))) return [3 /*break*/, 2];
                return [4 /*yield*/, refreshToken(requestRefresh)];
            case 1:
                // do refresh
                accessToken = _a.sent();
                _a.label = 2;
            case 2: return [2 /*return*/, accessToken];
        }
    });
}); };
exports.useAuthTokenInterceptor = function (axios, config) {
    if (!axios.interceptors)
        throw new Error("invalid axios instance: " + axios);
    axios.interceptors.request.use(authTokenInterceptor(config));
};
//# sourceMappingURL=index.js.map